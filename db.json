{"meta":{"version":1,"warehouse":"1.0.2"},"models":{"Asset":[{"_id":"themes/jacman/source/js/totop.js","path":"js/totop.js","modified":1},{"_id":"themes/jacman/source/js/jquery.imagesloaded.min.js","path":"js/jquery.imagesloaded.min.js","modified":1},{"_id":"themes/jacman/source/js/jquery-2.0.3.min.js","path":"js/jquery-2.0.3.min.js","modified":1},{"_id":"themes/jacman/source/js/gallery.js","path":"js/gallery.js","modified":1},{"_id":"themes/jacman/source/img/scrollup.png","path":"img/scrollup.png","modified":1},{"_id":"themes/jacman/source/img/logo.svg","path":"img/logo.svg","modified":1},{"_id":"themes/jacman/source/img/logo.png","path":"img/logo.png","modified":1},{"_id":"themes/jacman/source/img/jacman.jpg","path":"img/jacman.jpg","modified":1},{"_id":"themes/jacman/source/img/favicon.ico","path":"img/favicon.ico","modified":1},{"_id":"themes/jacman/source/img/cc-zero.svg","path":"img/cc-zero.svg","modified":1},{"_id":"themes/jacman/source/img/cc-by.svg","path":"img/cc-by.svg","modified":1},{"_id":"themes/jacman/source/img/cc-by-sa.svg","path":"img/cc-by-sa.svg","modified":1},{"_id":"themes/jacman/source/img/cc-by-nd.svg","path":"img/cc-by-nd.svg","modified":1},{"_id":"themes/jacman/source/img/cc-by-nc.svg","path":"img/cc-by-nc.svg","modified":1},{"_id":"themes/jacman/source/img/cc-by-nc-sa.svg","path":"img/cc-by-nc-sa.svg","modified":1},{"_id":"themes/jacman/source/img/cc-by-nc-nd.svg","path":"img/cc-by-nc-nd.svg","modified":1},{"_id":"themes/jacman/source/img/banner.jpg","path":"img/banner.jpg","modified":1},{"_id":"themes/jacman/source/img/author.png","path":"img/author.png","modified":1},{"_id":"themes/jacman/source/img/author.jpg","path":"img/author.jpg","modified":1},{"_id":"themes/jacman/source/font/fontdiao.woff","path":"font/fontdiao.woff","modified":1},{"_id":"themes/jacman/source/font/fontdiao.ttf","path":"font/fontdiao.ttf","modified":1},{"_id":"themes/jacman/source/font/fontdiao.svg","path":"font/fontdiao.svg","modified":1},{"_id":"themes/jacman/source/font/fontdiao.eot","path":"font/fontdiao.eot","modified":1},{"_id":"themes/jacman/source/font/fontawesome-webfont.woff","path":"font/fontawesome-webfont.woff","modified":1},{"_id":"themes/jacman/source/font/fontawesome-webfont.ttf","path":"font/fontawesome-webfont.ttf","modified":1},{"_id":"themes/jacman/source/font/fontawesome-webfont.svg","path":"font/fontawesome-webfont.svg","modified":1},{"_id":"themes/jacman/source/font/fontawesome-webfont.eot","path":"font/fontawesome-webfont.eot","modified":1},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.woff","path":"font/coveredbyyourgrace-webfont.woff","modified":1},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.ttf","path":"font/coveredbyyourgrace-webfont.ttf","modified":1},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.svg","path":"font/coveredbyyourgrace-webfont.svg","modified":1},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.eot","path":"font/coveredbyyourgrace-webfont.eot","modified":1},{"_id":"themes/jacman/source/font/FontAwesome.otf","path":"font/FontAwesome.otf","modified":1},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":1},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":1},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":1},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":1},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":1},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":1},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":1},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":1},{"_id":"themes/jacman/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":1},{"_id":"themes/jacman/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1},{"_id":"themes/jacman/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1},{"_id":"themes/jacman/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1},{"_id":"themes/jacman/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1},{"_id":"themes/jacman/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1},{"_id":"themes/jacman/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1},{"_id":"themes/jacman/source/css/style.styl","path":"css/style.styl","modified":1}],"Cache":[{"_id":"source/_posts/CollectionTypes.md","shasum":"5907c6fb27f5f386422ebc9f857a2c3bf6b95d8f","modified":1433512948000},{"_id":"source/_posts/Strategy.md","shasum":"4a61ef081abcb53632e02249c3738ff2ab023ce5","modified":1433169982000},{"_id":"source/_posts/StringandCharacters.md","shasum":"be7b2ab178ab3a398f3674c7177d145ca64f6082","modified":1433430855000},{"_id":"source/_posts/Swift-Basic.md","shasum":"f7ea7bf5129bd3b82ab1e24d9ee9c69082c3cdc6","modified":1433426231000},{"_id":"source/_posts/characters.cpp","shasum":"2c29a3996e8d18a47de8ae2c3e7cbf2502e0e964","modified":1433167512000},{"_id":"source/_posts/characters.h","shasum":"362dea034fe09677087fb2530b7e910ed66cb086","modified":1433167520000},{"_id":"source/_posts/operational-symbol.md","shasum":"02ca6afec4bcc2bf435ed86a294dd3b4716abd19","modified":1433430535000},{"_id":"source/_posts/控制流.md","shasum":"239c2dac5b54c88b59292b41c20e691624886802","modified":1433515224000},{"_id":"source/about/index.md","shasum":"e70b657bf23e9a59dd917388d6c6c0279f6eb828","modified":1433172334000},{"_id":"source/categories/index.md","shasum":"4de5da4e0e531798f603fa98c78cc175b377fd42","modified":1433003971000},{"_id":"source/tags/index.md","shasum":"9652ba9cfeb26a4d51fde48008e69ee373a9a1e6","modified":1433004003000},{"_id":"themes/jacman/LICENSE","shasum":"931516aa36c53eb7843c83d82662eb50cc3c4367","modified":1432956621000},{"_id":"themes/jacman/README.md","shasum":"38698c732ca2c0fa48de89cfee9859bc09e74fd4","modified":1432956621000},{"_id":"themes/jacman/README_zh.md","shasum":"ee9eeb2b72e5597a3550d59d231f443d990d3115","modified":1432956621000},{"_id":"themes/jacman/_config.yml","shasum":"3a68402336e4804078b15a3dad5dbefce9cdd08c","modified":1433051080000},{"_id":"themes/jacman/languages/default.yml","shasum":"ad0de3e82c7fc238cc067ffc37359b1420aef6b3","modified":1432956621000},{"_id":"themes/jacman/languages/zh-CN.yml","shasum":"5e4ac19d7b2bbf0d5b5aa55d33653380abda8b9a","modified":1432956621000},{"_id":"themes/jacman/languages/zh-TW.yml","shasum":"41c112162d79b4d3f97b417c7cd6ca6d70419ef2","modified":1432956621000},{"_id":"themes/jacman/layout/_partial/after_footer.ejs","shasum":"07b52001fb612d67cfc2d60f982a4e838cdf0c17","modified":1432956621000},{"_id":"themes/jacman/layout/_partial/analytics.ejs","shasum":"fd004beb8d4500afd5fb3b3871a95afa2a375f16","modified":1432956621000},{"_id":"themes/jacman/layout/_partial/archive.ejs","shasum":"2c7395e7563fe016521712a645c28a13f952d52a","modified":1432956621000},{"_id":"themes/jacman/layout/_partial/article.ejs","shasum":"8d2e31cc0817910f6e59ca607798d3ce5fbcb5bc","modified":1432987736000},{"_id":"themes/jacman/layout/_partial/article_row.ejs","shasum":"4cb855d91ece7f67b2ca0992fffa55472d0b9c93","modified":1432956621000},{"_id":"themes/jacman/layout/_partial/categories.ejs","shasum":"8a52d0344d5bce1925cf586ed73c11192925209b","modified":1432956621000},{"_id":"themes/jacman/layout/_partial/footer.ejs","shasum":"7a7eaa64ac5139c4c418844aa35076271cd4365d","modified":1432956621000},{"_id":"themes/jacman/layout/_partial/head.ejs","shasum":"761941be4922cd3c177c8130296b909bf7db5c09","modified":1432956621000},{"_id":"themes/jacman/layout/_partial/header.ejs","shasum":"18515612344ff048b9372b91b7eef6f3b143801f","modified":1432956621000},{"_id":"themes/jacman/layout/_partial/mathjax.ejs","shasum":"d42994ac696f52ba99c1cbac382cd76d5b04a3e8","modified":1432956621000},{"_id":"themes/jacman/layout/_partial/pagination.ejs","shasum":"6146ac37dfb4f8613090bc52b3fc8cfa911a186a","modified":1432956621000},{"_id":"themes/jacman/layout/_partial/post/article.ejs","shasum":"b09e3acea7076e1f01dfe0c2295e19951ea09437","modified":1432956621000},{"_id":"themes/jacman/layout/_partial/post/catetags.ejs","shasum":"0e37bababc8f4659f5b59a552a946b46d89e4158","modified":1432956621000},{"_id":"themes/jacman/layout/_partial/post/comment.ejs","shasum":"c88bc8f5805173920a5fdd7e9234a850e3d8e151","modified":1433000474000},{"_id":"themes/jacman/layout/_partial/post/footer.ejs","shasum":"b12ec08a5845a3d8c01257614f1dfead879c87d2","modified":1432956621000},{"_id":"themes/jacman/layout/_partial/post/gallery.ejs","shasum":"fafc2501d7e65983b0f5c2b58151ca12e57c0574","modified":1432956621000},{"_id":"themes/jacman/layout/_partial/post/header.ejs","shasum":"36a705942b691abe0d643ea8afa339981b32f6f2","modified":1432956621000},{"_id":"themes/jacman/layout/_partial/post/jiathis.ejs","shasum":"d7f5960039ac74924559ab6ba03c64457b8f0966","modified":1432956621000},{"_id":"themes/jacman/layout/_partial/post/pagination.ejs","shasum":"7de9c07a4c968429a8088c31a28b7f3a993ded1b","modified":1432956621000},{"_id":"themes/jacman/layout/_partial/search.ejs","shasum":"1083824a6c6c3df02767f2f3b727aee78ebb76ec","modified":1432956621000},{"_id":"themes/jacman/layout/_partial/sidebar.ejs","shasum":"c4f527fff0070fbe65919053a16224412317f40d","modified":1432956621000},{"_id":"themes/jacman/layout/_partial/tags.ejs","shasum":"b33b2b5d08f1d53a8de25a95f660f7f1cea7b3cb","modified":1432956621000},{"_id":"themes/jacman/layout/_partial/tinysou_search.ejs","shasum":"06ecddc8a9d40b480fe2e958af1dab857a9d5441","modified":1432956621000},{"_id":"themes/jacman/layout/_partial/totop.ejs","shasum":"bea5bb7cb9350b8af7d97a8d223af63a5b30ab78","modified":1432956621000},{"_id":"themes/jacman/layout/_widget/archive.ejs","shasum":"39ea6b7888406fbd1b4cf236ebd718e881493374","modified":1432956621000},{"_id":"themes/jacman/layout/_widget/category.ejs","shasum":"c1fae96b5053da021bcc04ab2ce5c2c8d30de8a2","modified":1432956621000},{"_id":"themes/jacman/layout/_widget/douban.ejs","shasum":"94ce1fb7a1143f34ac1365924b00cae64e1a111e","modified":1432956621000},{"_id":"themes/jacman/layout/_widget/links.ejs","shasum":"e49868063439c2092cdf9a8ec82cc295b0e42f66","modified":1432956621000},{"_id":"themes/jacman/layout/_widget/rss.ejs","shasum":"0a4b5f2a2e36a1d504fe2e7c6c8372cbb4628aab","modified":1432956621000},{"_id":"themes/jacman/layout/_widget/tag.ejs","shasum":"7e82ad9c916b9ce871b2f65ce8f283c5ba47947b","modified":1432956621000},{"_id":"themes/jacman/layout/_widget/tagcloud.ejs","shasum":"10a1001189d5c28ce6d42494563b9637c302b454","modified":1432956621000},{"_id":"themes/jacman/layout/_widget/weibo.ejs","shasum":"a31c2b223d0feb2a227e203cac9e5d13b7d328a8","modified":1432956621000},{"_id":"themes/jacman/layout/archive.ejs","shasum":"a18842e3d719fe3ca9b977a6995f8facc75c8673","modified":1432956621000},{"_id":"themes/jacman/layout/category.ejs","shasum":"9b740fc33f6f028df60f0bc4312bf3ebd03aa8ea","modified":1432956621000},{"_id":"themes/jacman/layout/index.ejs","shasum":"75cef2172c286994af412e11ab7f4f5a0daaf1f5","modified":1432956621000},{"_id":"themes/jacman/layout/layout.ejs","shasum":"5b4289a4526899809b9c2facea535367ff51ba2b","modified":1432956621000},{"_id":"themes/jacman/layout/page.ejs","shasum":"bd6bbf2ea8e183bd835867ff617dc6366b56748c","modified":1432956621000},{"_id":"themes/jacman/layout/post.ejs","shasum":"3114134775bdde5a83cf14feb019606fa2b2b2be","modified":1432956621000},{"_id":"themes/jacman/layout/tag.ejs","shasum":"45150a2365768b6b67880193c9264ad2bb4814db","modified":1432956621000},{"_id":"themes/jacman/scripts/fancybox.js","shasum":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1432956621000},{"_id":"themes/jacman/source/css/_base/code.styl","shasum":"a7fe002222bfc7a125c8fe92b26ba9dc604595a2","modified":1432956621000},{"_id":"themes/jacman/source/css/_base/font.styl","shasum":"c8a0faf43b08e37ad07a5669db76d595da966159","modified":1432956621000},{"_id":"themes/jacman/source/css/_base/public.styl","shasum":"a29e4a4fbc288323b7f3ca2e501a6609e5646e2f","modified":1432956621000},{"_id":"themes/jacman/source/css/_base/variable.styl","shasum":"cb652eb83c28a208743fabab92de896f8b7cbf7b","modified":1432956621000},{"_id":"themes/jacman/source/css/_partial/article.styl","shasum":"c69641b4a34a8c62986b335414413dbde26de25e","modified":1432956621000},{"_id":"themes/jacman/source/css/_partial/aside.styl","shasum":"6b0e46e2e3be200339197696f5aabd0871aa9952","modified":1432956621000},{"_id":"themes/jacman/source/css/_partial/duoshuo.styl","shasum":"e85f1192283f043115c272a9deb3cb6ced793990","modified":1432956621000},{"_id":"themes/jacman/source/css/_partial/footer.styl","shasum":"1911613a19b605a58f801c21b03b5d4c83b90f9c","modified":1432956621000},{"_id":"themes/jacman/source/css/_partial/gallery.styl","shasum":"7246809f4ce3166ec1b259bf475cae1a48e29aad","modified":1432956621000},{"_id":"themes/jacman/source/css/_partial/header.styl","shasum":"5121ceb712be3f2dde98b8b6e589b546e19eab8f","modified":1432956621000},{"_id":"themes/jacman/source/css/_partial/helper.styl","shasum":"0bf862a860c07aff5f440b5e6f040baa83031d2c","modified":1432956621000},{"_id":"themes/jacman/source/css/_partial/index.styl","shasum":"864fba1fcb3830a9055c366a99ce5c951c2e9fe9","modified":1432956621000},{"_id":"themes/jacman/source/css/_partial/totop.styl","shasum":"96363d7c5aaed5f649667fc0752a62620a67e872","modified":1432956621000},{"_id":"themes/jacman/source/css/style.styl","shasum":"89070fcce9a70c82ea5559ae8f6efc60e624c6d3","modified":1432956621000},{"_id":"themes/jacman/source/fancybox/blank.gif","shasum":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1432956621000},{"_id":"themes/jacman/source/fancybox/fancybox_loading.gif","shasum":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1432956621000},{"_id":"themes/jacman/source/fancybox/fancybox_loading@2x.gif","shasum":"273b123496a42ba45c3416adb027cd99745058b0","modified":1432956621000},{"_id":"themes/jacman/source/fancybox/fancybox_overlay.png","shasum":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1432956621000},{"_id":"themes/jacman/source/fancybox/fancybox_sprite.png","shasum":"17df19f97628e77be09c352bf27425faea248251","modified":1432956621000},{"_id":"themes/jacman/source/fancybox/fancybox_sprite@2x.png","shasum":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1432956621000},{"_id":"themes/jacman/source/fancybox/helpers/fancybox_buttons.png","shasum":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1432956621000},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-buttons.css","shasum":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1432956621000},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-buttons.js","shasum":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1432956621000},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-media.js","shasum":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1432956621000},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-thumbs.css","shasum":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1432956621000},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-thumbs.js","shasum":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1432956621000},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.css","shasum":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1432956621000},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.js","shasum":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1432956621000},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.pack.js","shasum":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1432956621000},{"_id":"themes/jacman/source/font/FontAwesome.otf","shasum":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1432956621000},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.eot","shasum":"a17d0f10534303e40f210c506ebb8703fa23b7de","modified":1432956621000},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.ttf","shasum":"194ccb4acf77a03dc25bcc174edb266143704fec","modified":1432956621000},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.woff","shasum":"c6f8dc1a2f6ce914f120e80a876b8fd77b98888e","modified":1432956621000},{"_id":"themes/jacman/source/font/fontawesome-webfont.eot","shasum":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1432956621000},{"_id":"themes/jacman/source/font/fontawesome-webfont.woff","shasum":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1432956621000},{"_id":"themes/jacman/source/font/fontdiao.eot","shasum":"9544a0d7ba208989302bc4da5a184faeb0e883c9","modified":1432956621000},{"_id":"themes/jacman/source/font/fontdiao.ttf","shasum":"ee9fd7be2493c9bf6d2841044e69a0830d9d3fab","modified":1432956621000},{"_id":"themes/jacman/source/font/fontdiao.woff","shasum":"71f54eb6e98aa28cafeb04aab71c0e5b349ea89f","modified":1432956621000},{"_id":"themes/jacman/source/img/author.jpg","shasum":"64cb7e7ec405d519616e2930d41d771ff612e60d","modified":1433006781000},{"_id":"themes/jacman/source/img/author.png","shasum":"5263bf66d9779bd14ba5ab12ae609e043108a1a6","modified":1432975949000},{"_id":"themes/jacman/source/img/cc-by-nc-nd.svg","shasum":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1432956621000},{"_id":"themes/jacman/source/img/cc-by-nc-sa.svg","shasum":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1432956621000},{"_id":"themes/jacman/source/img/cc-by-nc.svg","shasum":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1432956621000},{"_id":"themes/jacman/source/img/cc-by-nd.svg","shasum":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1432956621000},{"_id":"themes/jacman/source/img/cc-by-sa.svg","shasum":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1432956621000},{"_id":"themes/jacman/source/img/cc-by.svg","shasum":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1432956621000},{"_id":"themes/jacman/source/img/cc-zero.svg","shasum":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1432956621000},{"_id":"themes/jacman/source/img/favicon.ico","shasum":"4eda7c0f3a36181f483dd0a14efe9f58c8b29814","modified":1432972197000},{"_id":"themes/jacman/source/img/jacman.jpg","shasum":"0ba14a4a5e3be012826fc713c33479912126d34e","modified":1432956621000},{"_id":"themes/jacman/source/img/logo.png","shasum":"5263bf66d9779bd14ba5ab12ae609e043108a1a6","modified":1432975949000},{"_id":"themes/jacman/source/img/logo.svg","shasum":"9ae38f7225c38624faeb7b74996efa9de7bf065b","modified":1432956621000},{"_id":"themes/jacman/source/img/scrollup.png","shasum":"2137d4f1739aa8aa3fcb0348c3ddf1e41d62f2e3","modified":1432956621000},{"_id":"themes/jacman/source/js/gallery.js","shasum":"f8a4ba7fb8349cca374a3c69fff9b2bf21f742ed","modified":1432956621000},{"_id":"themes/jacman/source/js/jquery.imagesloaded.min.js","shasum":"4109837b1f6477bacc6b095a863b1b95b1b3693f","modified":1432956621000},{"_id":"themes/jacman/source/js/totop.js","shasum":"cad23c5ea7163d1e5c05a0fd3ef9233469da10cb","modified":1432956621000},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.svg","shasum":"eabdb262d8e246865dfb56031f01ff6e8d2f9d53","modified":1432956621000},{"_id":"themes/jacman/source/font/fontawesome-webfont.ttf","shasum":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1432956621000},{"_id":"themes/jacman/source/font/fontdiao.svg","shasum":"334a94e6a66a8b089be7315d876bec93efe38d2b","modified":1432956621000},{"_id":"themes/jacman/source/js/jquery-2.0.3.min.js","shasum":"a0ae3697b0ab8c0e8bd3186c80db42abd6d97a8d","modified":1432956621000},{"_id":"themes/jacman/source/font/fontawesome-webfont.svg","shasum":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1432956621000},{"_id":"themes/jacman/source/img/banner.jpg","shasum":"5104860c4f8b2e84ef734ba6c37fe7a288bf0d74","modified":1432956621000}],"Category":[{"name":"Swift","_id":"ciakg4ime00018fp9e922okxa"},{"name":"设计模式","_id":"ciakg4inj000v8fp91z2aqrro"},{"name":"笔记","parent":"ciakg4inj000v8fp91z2aqrro","_id":"ciakg4inj000y8fp9efofgu9k"}],"Data":[],"Page":[{"layout":"tags","title":"【策略模式】","_content":"","source":"tags/index.md","raw":"layout: tags\ntitle: 【策略模式】\n---","date":"2015-06-06T02:36:07.000Z","updated":"2015-05-30T16:40:03.000Z","path":"tags/index.html","comments":1,"_id":"ciakg4in500098fp976fqs1d3"},{"layout":"categories","title":"设计模式","_content":"","source":"categories/index.md","raw":"layout: categories\ntitle: [设计模式]\n---","date":"2015-06-06T02:36:07.000Z","updated":"2015-05-30T16:39:31.000Z","path":"categories/index.html","comments":1,"_id":"ciakg4in6000a8fp9jlzwipei"},{"title":"About me","_content":"##Name\nCN：胡小峰\n\n##\n","source":"about/index.md","raw":"title: About me\n---\n##Name\nCN：胡小峰\n\n##\n","date":"2015-06-06T02:36:07.000Z","updated":"2015-06-01T15:25:34.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"ciakg4in6000b8fp9lqvul13i"}],"Post":[{"title":"集合类型（Collection Types）","_content":"\n##数组\n可以存储多个`类型相同`的值。不同于oc中的NSArray和NSMutableArray\n###两种声明方式\n1. `var ary :Array<String>`\n2. `var ary :[String]`\n3. `var ary = [Int]()` 声明并初始化且元素为空\n4. `var ary = [String](count: 5, repeatedValue: \"empty\")` 指定元素个数与初始值\n5. `var ary = Array(count: 5, repeatedValue: \"empty\")`\n\n###构造\n\n```\n[\"\",\"\"]\n\n```\n\n###访问和修改\ncount\n\nisEmpty\n\nappend()\n\n+\n\n+=\n\n[]下标访问与修改\n\n[]修改区间段的值\n\nNote:不可以使用下标在数组末尾添加新项\n\ninsert(data,atIndex:index) 在index索引之前添加数据data\n\nremoveAtIndex(index) 移除指定位置的数据并返回改数据\n\nremoveLast()\n\n遍历数组\n\n1. for element in array\n2. for (index,value) in enumerate(array)\nenumerate返回数组每项元素的索引和值\n\n\n##集合\n用来存储相同类型并且没有确定顺序的值。当元素顺序不重要或者希望确保每个元素只出现一次时可以考虑使用集合。\n###语法\n1. `var sets = Set<String>()`\n2. `var sets: Set<String> = [\"\",\"”]` 可以简化为`var sets: Set = [\"\",\"”]`\n\n###访问和修改\ncount \n\nisEmpty\n\ninsert\n\nremove如果值存在则删除并返回该值，否则返回nil\n\ncontains检查set中是否包含一个特定的值\n\n遍历与数组相同\n\n因为set没有顺序，如果需要按照特定顺序来遍历一个set中的值可以使用全局sorted函数\n```\nvar sets :Set = [\"1\",\"2\",\"3\"]\n\nfor str in sorted(sets){\n    println(str)\n}\n```\n\nunion() 合并两个集合剔除重复的元素\n\nsets1.subtract(sets2) sets1中的元素且不在sets2中出现\n\nintersect() 两个集合中都包含的值集合\n\nexclusiveOr() 两个集合中不重复的元素集合\n\n集合间比较\n\n1. = 比较集合是否包含相同的元素\n2. setsb.isSubsetOf(setsa) \t\tsetsb是否是setsa的子集（两个集合可以相等）\n3. setsa.issupersetOf(setsb) \tsetsa是否是setsb的父集（两个集合可以相等）\n4. isStrictSubsetOf()或者isStrictSupersetOf()功能与上面两个函数功能相同（两个集合不能相等）\n5. isDisjoinWith()  判断两个集合是否完全不相同（没有一个相同的元素）\n\n###Set类型的哈希值\n\n\n##字典\n字典是一种存储多个相同类型的值得容器。每个值都关联唯一的键，键作为字典中的这个值数据的标示符。无序\n\nNote:keyType的唯一的要求就是可哈希的。\n\n###字面量\nvar dicts:[String:String] = [\"name\":\"dict\",\"age\":\"10\"] 可以简化为 var dicts = [\"name\":\"dict\",\"age\":\"10\"]\n\n###操作字典\n\ncount\n\nisEmpty\n\n修改值的两种方式\n\n1. 下标操作\n\t下标操作可以为字典添加元素，这点不同于数组。也可以设置为nil移除键值对\n2. updateValue(forKey:) 此方法可以设置或者更新特定键对应的值。不过它会返回此键的原值\n3. removeValueForKey()同样会返回移除的值，如果不存在值的情况会返回nil\n\n\n+ 字典遍历\nfor-in 遍历字典通常会将键值对以元组的形式返回，我们可以分解元组\n\n```\nvar dict = [\"a\":\"1\",\"b\":\"2\"]\nfor (key,value) in dict{\n\tprintln(\"key:\"+key+\" value:\"+value)\n}\n```\n\n我们还可以使用它的keys和values属性遍历\n\n```\nfor key in dict.keys{\n\tprintln(\"key:\"+key)\n}\n\n```\n\t\nArray(dict.keys)\n\n创建空字典 var dict = Dictionary<Int,Int>()\n如果字典已经有了类型信息我们可以空字典字面量来创建一个空字典[:]\ndict = [:]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/CollectionTypes.md","raw":"title: 集合类型（Collection Types）\ntags: [Array,Set,Dictionary]\ncategories: [Swift]\n\n---\n\n##数组\n可以存储多个`类型相同`的值。不同于oc中的NSArray和NSMutableArray\n###两种声明方式\n1. `var ary :Array<String>`\n2. `var ary :[String]`\n3. `var ary = [Int]()` 声明并初始化且元素为空\n4. `var ary = [String](count: 5, repeatedValue: \"empty\")` 指定元素个数与初始值\n5. `var ary = Array(count: 5, repeatedValue: \"empty\")`\n\n###构造\n\n```\n[\"\",\"\"]\n\n```\n\n###访问和修改\ncount\n\nisEmpty\n\nappend()\n\n+\n\n+=\n\n[]下标访问与修改\n\n[]修改区间段的值\n\nNote:不可以使用下标在数组末尾添加新项\n\ninsert(data,atIndex:index) 在index索引之前添加数据data\n\nremoveAtIndex(index) 移除指定位置的数据并返回改数据\n\nremoveLast()\n\n遍历数组\n\n1. for element in array\n2. for (index,value) in enumerate(array)\nenumerate返回数组每项元素的索引和值\n\n\n##集合\n用来存储相同类型并且没有确定顺序的值。当元素顺序不重要或者希望确保每个元素只出现一次时可以考虑使用集合。\n###语法\n1. `var sets = Set<String>()`\n2. `var sets: Set<String> = [\"\",\"”]` 可以简化为`var sets: Set = [\"\",\"”]`\n\n###访问和修改\ncount \n\nisEmpty\n\ninsert\n\nremove如果值存在则删除并返回该值，否则返回nil\n\ncontains检查set中是否包含一个特定的值\n\n遍历与数组相同\n\n因为set没有顺序，如果需要按照特定顺序来遍历一个set中的值可以使用全局sorted函数\n```\nvar sets :Set = [\"1\",\"2\",\"3\"]\n\nfor str in sorted(sets){\n    println(str)\n}\n```\n\nunion() 合并两个集合剔除重复的元素\n\nsets1.subtract(sets2) sets1中的元素且不在sets2中出现\n\nintersect() 两个集合中都包含的值集合\n\nexclusiveOr() 两个集合中不重复的元素集合\n\n集合间比较\n\n1. = 比较集合是否包含相同的元素\n2. setsb.isSubsetOf(setsa) \t\tsetsb是否是setsa的子集（两个集合可以相等）\n3. setsa.issupersetOf(setsb) \tsetsa是否是setsb的父集（两个集合可以相等）\n4. isStrictSubsetOf()或者isStrictSupersetOf()功能与上面两个函数功能相同（两个集合不能相等）\n5. isDisjoinWith()  判断两个集合是否完全不相同（没有一个相同的元素）\n\n###Set类型的哈希值\n\n\n##字典\n字典是一种存储多个相同类型的值得容器。每个值都关联唯一的键，键作为字典中的这个值数据的标示符。无序\n\nNote:keyType的唯一的要求就是可哈希的。\n\n###字面量\nvar dicts:[String:String] = [\"name\":\"dict\",\"age\":\"10\"] 可以简化为 var dicts = [\"name\":\"dict\",\"age\":\"10\"]\n\n###操作字典\n\ncount\n\nisEmpty\n\n修改值的两种方式\n\n1. 下标操作\n\t下标操作可以为字典添加元素，这点不同于数组。也可以设置为nil移除键值对\n2. updateValue(forKey:) 此方法可以设置或者更新特定键对应的值。不过它会返回此键的原值\n3. removeValueForKey()同样会返回移除的值，如果不存在值的情况会返回nil\n\n\n+ 字典遍历\nfor-in 遍历字典通常会将键值对以元组的形式返回，我们可以分解元组\n\n```\nvar dict = [\"a\":\"1\",\"b\":\"2\"]\nfor (key,value) in dict{\n\tprintln(\"key:\"+key+\" value:\"+value)\n}\n```\n\n我们还可以使用它的keys和values属性遍历\n\n```\nfor key in dict.keys{\n\tprintln(\"key:\"+key)\n}\n\n```\n\t\nArray(dict.keys)\n\n创建空字典 var dict = Dictionary<Int,Int>()\n如果字典已经有了类型信息我们可以空字典字面量来创建一个空字典[:]\ndict = [:]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"CollectionTypes","published":1,"date":"2015-06-06T02:36:07.000Z","updated":"2015-06-05T14:02:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciakg4ima00008fp92mr2v930"},{"title":"控制流","date":"2015-06-05T14:02:51.000Z","_content":"##For\nSwift中提供了两种for循环形式\n\n+ for-in 用来遍历一个区间，序列，集合，系列里面所有的元素执行一系列语句\n+ for条件递增语句\n\n```\nfor index in 1...5{\n\n}\n```\n其中index会隐式声明为常量；其只存在于循环的生命周期里。如果你不需要知道每项的值，你可以使用“_”替代变量名来忽略对值得访问：\n\n```\nfor _ in 1...5{\n\t//statement\n}\n```\n\n```\nfor var i = 0; i < 10;++i {\n\t//statement\n}\n```\n\n##While\n\nSwift提供两种方式的while循环形式\n\n`while`,每次在循环开始时计算条件是否符合\n\n`do-while`，每次在循环结束计算条件是否符合\n\n```\nvar index:Int = 0\nwhile index < 5{\n\t//staement\n\t++index\n}\n```\n\n```\nvar index:Int = 0\ndo{\n++index\n}while(index < 5)\n```\n\n\n##条件语句\n### IF\nSwift 提供了两种类型的条件语句：if语句和switch语句。\n\n```\nif 1 < 2{\n\n}else if 2 < 3{\n\n}else{\n\n}\n```\n###Switch\n\n\n##控制转移语句\n","source":"_posts/控制流.md","raw":"title: 控制流\ndate: 2015-06-05 22:02:51\ntags: [控制流]\ncategories: [Swift]\n\n---\n##For\nSwift中提供了两种for循环形式\n\n+ for-in 用来遍历一个区间，序列，集合，系列里面所有的元素执行一系列语句\n+ for条件递增语句\n\n```\nfor index in 1...5{\n\n}\n```\n其中index会隐式声明为常量；其只存在于循环的生命周期里。如果你不需要知道每项的值，你可以使用“_”替代变量名来忽略对值得访问：\n\n```\nfor _ in 1...5{\n\t//statement\n}\n```\n\n```\nfor var i = 0; i < 10;++i {\n\t//statement\n}\n```\n\n##While\n\nSwift提供两种方式的while循环形式\n\n`while`,每次在循环开始时计算条件是否符合\n\n`do-while`，每次在循环结束计算条件是否符合\n\n```\nvar index:Int = 0\nwhile index < 5{\n\t//staement\n\t++index\n}\n```\n\n```\nvar index:Int = 0\ndo{\n++index\n}while(index < 5)\n```\n\n\n##条件语句\n### IF\nSwift 提供了两种类型的条件语句：if语句和switch语句。\n\n```\nif 1 < 2{\n\n}else if 2 < 3{\n\n}else{\n\n}\n```\n###Switch\n\n\n##控制转移语句\n","slug":"控制流","published":1,"updated":"2015-06-05T14:40:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciakg4in8000c8fp9boc06a5m"},{"title":"算术运算符","date":"2015-06-04T13:54:07.000Z","_content":"\n了解到Swift中得基本运算符，高级运算符，自定义运算符，自定义类型的运算符重载。\n\n与C语言的区别\n1. 赋值号 = 不返回值\n2. 可以对浮点型取余操作\n3. 区间运算符\n\n#术语\n运算符有一元、二元和三元运算符。\n\n##一元运算符\n一元运算符是指对单一对象进行操作\n\n1. 前置\n2. 后置\n\n##二元运算符\n二元运算符是中置的，因为他们出现在两个操作对象之间。\n\n##三元运算符\n只有一个三元操作符 a ? b:c\n\n##复合运算符\n\n##比较运算符\n恒等 ===  !== 判断两个对象是否引用同一个对象实例\n\n##空合运算符\n`a ?? b`  ==  `a != nil ? a!:b`\n\n+ 表达式a必须是optioal类型\n+ 默认值b的类型必须要和a存储值得类型保持一致\n\n功能 封装条件判断和解封两种行为\n\n短路计算\n\n##区间运算符\n\nSwift提供了两个区间的值的运算符\n\n+ 闭区间运算符\n\n\t`start...end` 定义一个包含从start到end的所有值得区间，end必须大于start。\n+ 半开区间运算符\n\t\n\t`start..<end`定义一个从start到end但不包括end的区间。\n\n\n","source":"_posts/operational-symbol.md","raw":"title: 算术运算符\ndate: 2015-06-04 21:54:07\ntags: [Swift算术运算符]\ncategories: [Swift]\n\n---\n\n了解到Swift中得基本运算符，高级运算符，自定义运算符，自定义类型的运算符重载。\n\n与C语言的区别\n1. 赋值号 = 不返回值\n2. 可以对浮点型取余操作\n3. 区间运算符\n\n#术语\n运算符有一元、二元和三元运算符。\n\n##一元运算符\n一元运算符是指对单一对象进行操作\n\n1. 前置\n2. 后置\n\n##二元运算符\n二元运算符是中置的，因为他们出现在两个操作对象之间。\n\n##三元运算符\n只有一个三元操作符 a ? b:c\n\n##复合运算符\n\n##比较运算符\n恒等 ===  !== 判断两个对象是否引用同一个对象实例\n\n##空合运算符\n`a ?? b`  ==  `a != nil ? a!:b`\n\n+ 表达式a必须是optioal类型\n+ 默认值b的类型必须要和a存储值得类型保持一致\n\n功能 封装条件判断和解封两种行为\n\n短路计算\n\n##区间运算符\n\nSwift提供了两个区间的值的运算符\n\n+ 闭区间运算符\n\n\t`start...end` 定义一个包含从start到end的所有值得区间，end必须大于start。\n+ 半开区间运算符\n\t\n\t`start..<end`定义一个从start到end但不包括end的区间。\n\n\n","slug":"operational-symbol","published":1,"updated":"2015-06-04T15:08:55.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciakg4ina000g8fp9inz1fwd8"},{"title":"Swift基础","date":"2015-06-04T12:02:38.000Z","_content":"#常量和变量\n1. 声明关键字\n2. 类型标注语法，以及与声明联合使用会发生怎么样的改变（之前怎样，之后又怎样）\n3. 命名规则：不能包含数学符号，箭头，保留的或者非法的Unicode码位，连线与制表符，不能以数字开头\n4. 如何使用Swift关键字命名\n5. print与println的区别\n6. println格式化输出字符串（字符串插值的方式）\n\n#注释\n1. 单行注释//\n2. 多行注释 （多行注释支持嵌套在其它的多行注释中）\n\n#整数\nSwift提供了8，16，32和64位的有符号和无符号整数类型 UInt8 Int8\n1. 整数范围UInt8.min |max\n#浮点数\n1. Double 至少15位数字（类型推断：如果没有给浮点型字面量标明类型，Swift优先Double）\n2. Float  至少6位数字\n\n#数值类型\n1. 数值型字面量的前缀 0b,0o,0x\n2. 类型转换（调用类型的构造器）\n3. 数字类量不同于数字类字面量。（数字字面量可以直接相加，而数字类量需要类型转换）\n\n#别名\ntypealias newType = oldType\n#Bool\n\n#元组\n可以把多个甚至类型不同的数据组合成一个复合值\n1. 声明元组语法 var test = (\"abc\",10,False)\n2. 分解元组var (a,b,c) = test。使用_可以忽略掉元组值 var (a,_,c) = test\n3. 通过索引访问元组 test.0,test.1\n4. 通过名称访问元组，不过之前得给元素设置名称 var test = (e1:\"abc\",e2:10,e3:False) 使用test.e1\n\n#可选类型\n1. 语法 var a:Int? = 10\n2. if与强行解析 可以判断值是否为nil，变量名后面!来获取值，不加!会输出Optional(10)类似的结果;强制解析nil会引发异常\n3. 可选绑定if var a = \"123\".toInt() {}如果toInt返回的Int？包含一个值，就创建变量a并将可选的值赋给它（不需要使用!取值）。\n4. nil不能用于非可选的常量和变量\n5. 如果可选类型没有赋值，它们会自动被设置为nil\n6. Oc中nil与Swift中的nil区别。OC中nil表示一个不存在的指针，swift中nil不是指针而表示一个确定的值。任何类型的可选状态都可以设置为nil，不只是对象类型\n\n#隐式解析可选类型\n1. 语法var acd : Int! = 10 主要应用在类的构造过程中\n2. 可选类型与隐式解析可选类型的区别 前者需要使用!，后者不用!就可以取值。\n3. 如果在隐式解析可选类型没有值的情况下取值会触发运行时错误。\nNote：如果变量之后可能会变成nil的话请不要使用隐式解析可选类型，如果你需要在变量的生命周期中判断是否是nil的话，请使用普通可选类型。\n\n#断言\n断言的使用场景 如果值缺失或者不满足特定的条件，你的代码可能没办法继续执行。这是可以使用断言来结束代码运行并通过调试来找到缺失的原因。\n\n1. 断言False 则终止程序 True继续执行\n2. assert(False,\"断言消息\") 断言信息可以省略\n\n具体的使用场景\n1. 整数类型的下标索引被传入一个自定义下标脚本实现，但是下标索引值可能太大或者太小\n2. 给函数传入非法的值\n3. 一个可选值现在时nil，但是后面的代码运行需要一个非nil值\n\n\n\n\n\n\n\n","source":"_posts/Swift-Basic.md","raw":"title: Swift基础\ndate: 2015-06-04 20:02:38\ntags: [Swift基础]\ncategories: [Swift]\n---\n#常量和变量\n1. 声明关键字\n2. 类型标注语法，以及与声明联合使用会发生怎么样的改变（之前怎样，之后又怎样）\n3. 命名规则：不能包含数学符号，箭头，保留的或者非法的Unicode码位，连线与制表符，不能以数字开头\n4. 如何使用Swift关键字命名\n5. print与println的区别\n6. println格式化输出字符串（字符串插值的方式）\n\n#注释\n1. 单行注释//\n2. 多行注释 （多行注释支持嵌套在其它的多行注释中）\n\n#整数\nSwift提供了8，16，32和64位的有符号和无符号整数类型 UInt8 Int8\n1. 整数范围UInt8.min |max\n#浮点数\n1. Double 至少15位数字（类型推断：如果没有给浮点型字面量标明类型，Swift优先Double）\n2. Float  至少6位数字\n\n#数值类型\n1. 数值型字面量的前缀 0b,0o,0x\n2. 类型转换（调用类型的构造器）\n3. 数字类量不同于数字类字面量。（数字字面量可以直接相加，而数字类量需要类型转换）\n\n#别名\ntypealias newType = oldType\n#Bool\n\n#元组\n可以把多个甚至类型不同的数据组合成一个复合值\n1. 声明元组语法 var test = (\"abc\",10,False)\n2. 分解元组var (a,b,c) = test。使用_可以忽略掉元组值 var (a,_,c) = test\n3. 通过索引访问元组 test.0,test.1\n4. 通过名称访问元组，不过之前得给元素设置名称 var test = (e1:\"abc\",e2:10,e3:False) 使用test.e1\n\n#可选类型\n1. 语法 var a:Int? = 10\n2. if与强行解析 可以判断值是否为nil，变量名后面!来获取值，不加!会输出Optional(10)类似的结果;强制解析nil会引发异常\n3. 可选绑定if var a = \"123\".toInt() {}如果toInt返回的Int？包含一个值，就创建变量a并将可选的值赋给它（不需要使用!取值）。\n4. nil不能用于非可选的常量和变量\n5. 如果可选类型没有赋值，它们会自动被设置为nil\n6. Oc中nil与Swift中的nil区别。OC中nil表示一个不存在的指针，swift中nil不是指针而表示一个确定的值。任何类型的可选状态都可以设置为nil，不只是对象类型\n\n#隐式解析可选类型\n1. 语法var acd : Int! = 10 主要应用在类的构造过程中\n2. 可选类型与隐式解析可选类型的区别 前者需要使用!，后者不用!就可以取值。\n3. 如果在隐式解析可选类型没有值的情况下取值会触发运行时错误。\nNote：如果变量之后可能会变成nil的话请不要使用隐式解析可选类型，如果你需要在变量的生命周期中判断是否是nil的话，请使用普通可选类型。\n\n#断言\n断言的使用场景 如果值缺失或者不满足特定的条件，你的代码可能没办法继续执行。这是可以使用断言来结束代码运行并通过调试来找到缺失的原因。\n\n1. 断言False 则终止程序 True继续执行\n2. assert(False,\"断言消息\") 断言信息可以省略\n\n具体的使用场景\n1. 整数类型的下标索引被传入一个自定义下标脚本实现，但是下标索引值可能太大或者太小\n2. 给函数传入非法的值\n3. 一个可选值现在时nil，但是后面的代码运行需要一个非nil值\n\n\n\n\n\n\n\n","slug":"Swift-Basic","published":1,"updated":"2015-06-04T13:57:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciakg4inc000k8fp9zf2y9ish"},{"layout":"strings","title":"字符串和字符","date":"2015-06-04T15:12:01.000Z","_content":"\nddd\n","source":"_posts/StringandCharacters.md","raw":"layout: strings\ntitle: 字符串和字符\ndate: 2015-06-04 23:12:01\ntags: [字符串,字符]\ncategories: [Swift]\n---\n\nddd\n","slug":"StringandCharacters","published":1,"updated":"2015-06-04T15:14:15.000Z","comments":1,"photos":[],"link":"","_id":"ciakg4ine000o8fp9ulzkmrid"},{"title":"笔记-策略模式","date":"2015-05-30T16:40:50.000Z","_content":"\n## 需求\n同学们都玩过游戏吧！\n在游戏世界中有很多角色供我们选择，每个角色的攻击方式都不一样，比如说刀砍、剑刺、射箭...\n那么问题来了，我们如何设计多个角色以及他们的攻击行为呢。\n\n## 实现\n\n### 方式1\n1. 定义一个角色父类并且提供一个攻击方法\n2. 所有子类皆继承此父类\n\n####代码\n\n```\n//\n//  characters.h\n//\n\n//角色父类\nclass Character\n{\npublic:\n\tvoid attack();\n};\n\n//刽子手\nclass Executioner : public Character\n{\npublic:\n\n};\n```\n\n```\n//\n//  characters.cpp\n//\n\n#include <iostream>\n#include \"character.h\"\n\nusing namespace std;\n\nvoid Character::attack()\n{\n\tcout << \"Character attack\" << endl;\n}\n\n```\n####分析结论\n对于目前的需求完全没有问题。可是多个角色该如何实现呢？如果继续延用上面的实现思路让每个角色都继承`Character`类，这样会导致只要子类的攻击行为与父类的不同，子类就必须重写父类的`attack`方法（缺乏灵活）；而又如果有2个子类的攻击方式相同我们又不能复用代码(无法复用)。那我们就试试第二种方式吧。\n####缺点\n1. 缺乏弹性不够灵活\n2. 代码无法复用\n\n### 方式2\n1. 将攻击方式提取出来定义成接口\n2. 各个角色子类实现此接口\n\n####代码\n\n```\n//\n//  characters.h\n//\n\nclass AttackBehavior\n{\npublic:\n\n};\n\n//角色父类\nclass Character\n{\npublic:\n\tvirtual void attack();\n};\n\n//刽子手\nclass Executioner : public Character ,public AttackBehavior\n{\npublic:\n\tvoid attack();\n};\n\n//剑客\nclass SwordsMan : public Character ,public AttackBehavior\n{\npublic:\n\tvoid attack();\n};\n\n```\n\n```\n//\n//  characters.cpp\n//\n\n#include <iostream>\n#include \"characters.h\"\n\nusing namespace std;\n\nvoid AttackBehavior::attack()\n{\n\n}\n\nvoid Executioner::attack()\n{\n\tcout << \"Executioner::attack\" << endl;\n}\n\nvoid SwordsMan::attack()\n{\n\tcout << \"SwordsMan::attack\" << endl;\n}\n\n```\n\n####分析结论\n这种方式比方式1够灵活，可是代码依然不能复用。\n这两种方式都依赖于“实现”，我们被实现绑的死死的，没办法改角色的攻击方式。\n\n####缺点\n2. 代码无法复用\n\n### 最终实现\n首先这里引出二条设计原则：\n+ `找出应用中可能需要变化之处，把它们独立出来，不要和那些不需要变化的代码混在一起。`\n+ `针对接口编程，而不是针对实现编程。`\n\n1. 把角色的攻击行为取出来定义成接口，再由其他具体的攻击行为实现它。\n2. 在父类中把行为组合到角色中来。\n\n####代码\n```\n//\n//  characters.h\n//\n\n//攻击接口\nclass AttackBehavior\n{\npublic:\n\tvirtual void attack();\n};\n\n//刽子手攻击行为\nclass ExecutionerBehavior : public AttackBehavior\n{\npublic:\t\n\tvoid attack();\n};\n\n//剑客攻击行为\nclass SwordsManBehavior : public AttackBehavior\n{\npublic:\t\n\tvoid attack();\n};\n\n//弓箭手攻击行为\nclass ArcherBehavior : public AttackBehavior\n{\npublic:\t\n\tvoid attack();\n};\n\n\n//角色-父类\nclass Character\n{\npublic:\n\tCharacter();\n\n\t//角色攻击方法\n\tvirtual void attack();\n\n\tvoid setAttackBehavior(AttackBehavior*);\n\tAttackBehavior* getAttackBehavior();\n\nprivate:\n\t//攻击行为变量\n\tAttackBehavior *_attackBehavior;\n};\n\n//角色-刽子手\nclass Executioner : public Character \n{\n};\n\n//角色-剑客\nclass SwordsMan : public Character \n{\n};\n\n//角色-弓箭手\nclass Archer : public Character \n{\n};\n```\n\n```\n//\n//  characters.cpp\n//\n\n#include <iostream>\n#include \"characters.h\"\n\nusing namespace std;\n\nvoid AttackBehavior::attack()\n{\n\t\n}\n\nvoid ExecutionerBehavior::attack()\n{\n\tcout << \"exec Executioner::attack\" << endl;\n}\n\nvoid SwordsManBehavior::attack()\n{\n\tcout << \"exec SwordsMan::attack\" << endl;\n}\n\nvoid ArcherBehavior::attack()\n{\n\tcout << \"exec Archer::attack\" << endl;\n}\n\n\nCharacter::Character():_attackBehavior(NULL)\n{\n}\n\nvoid Character::attack()\n{\n\tif (!_attackBehavior)return;\n\n\t_attackBehavior->attack();\n}\n\nvoid Character::setAttackBehavior(AttackBehavior *attackBehavior)\n{\n\t_attackBehavior = attackBehavior;\n}\n\nAttackBehavior* Character::getAttackBehavior()\n{\n\treturn _attackBehavior;\n}\n\nint main(int argc, char const *argv[])\n{\n\tSwordsManBehavior swordsManBehavior;\n\tArcherBehavior \t  archerBehavior;\n\n\tSwordsMan character;\n\tcharacter.setAttackBehavior(&swordsManBehavior);\n\tcharacter.attack();\n\n\tcharacter.setAttackBehavior(&archerBehavior);\n\tcharacter.attack();\n\n\treturn 0;\n}\n```\n####分析结论\n最终方式迥异于前两种方式，前两种的做法是：行为来自`Character`父类的具体实现，或是继承某个接口并由子类自行实现而来。\n这种做法和“继承”不同的地方在于，角色的行为不是继承来的，而是和适当的行为对象“组合”来的。\n这是一个很重要的技巧。其实这就是第三个设计原则：\n\n+ `多用组合，少用继承。`\n\n## 总结\n###策略模式\n定义了算法族，分别封装起来，但它们之间可以互相替换，此模式让算法的变化独立于使用算法的客户。\n\n###设计模式的好处\n1. 让开发人员之间有共享的词汇。\n2. 可以把你的思考架构的层次提高到模式层面，而不是仅停留在琐碎的对象上。\n\n###设计原则\n1. 找出应用中可能需要变化之处，把它们独立出来，不要和那些不需要变化的代码混在一起。\n2. 针对接口编程，而不是针对实现编程。\n3. 多用组合，少用继承。\n\n###建议\n1. 有一些面向对象原则，适用于所有的模式。当你无法找到适当的模式解决问题时，采用这些原则可以帮助你。\n2. 建立可维护的OO系统，要诀就在于随时想到系统以后可能需要的变化以及应付变化的原则。\n","source":"_posts/Strategy.md","raw":"title: 笔记-策略模式\ndate: 2015-05-31 00:40:50\ntags: [策略模式,Head First]\ncategories: [设计模式,笔记]\n---\n\n## 需求\n同学们都玩过游戏吧！\n在游戏世界中有很多角色供我们选择，每个角色的攻击方式都不一样，比如说刀砍、剑刺、射箭...\n那么问题来了，我们如何设计多个角色以及他们的攻击行为呢。\n\n## 实现\n\n### 方式1\n1. 定义一个角色父类并且提供一个攻击方法\n2. 所有子类皆继承此父类\n\n####代码\n\n```\n//\n//  characters.h\n//\n\n//角色父类\nclass Character\n{\npublic:\n\tvoid attack();\n};\n\n//刽子手\nclass Executioner : public Character\n{\npublic:\n\n};\n```\n\n```\n//\n//  characters.cpp\n//\n\n#include <iostream>\n#include \"character.h\"\n\nusing namespace std;\n\nvoid Character::attack()\n{\n\tcout << \"Character attack\" << endl;\n}\n\n```\n####分析结论\n对于目前的需求完全没有问题。可是多个角色该如何实现呢？如果继续延用上面的实现思路让每个角色都继承`Character`类，这样会导致只要子类的攻击行为与父类的不同，子类就必须重写父类的`attack`方法（缺乏灵活）；而又如果有2个子类的攻击方式相同我们又不能复用代码(无法复用)。那我们就试试第二种方式吧。\n####缺点\n1. 缺乏弹性不够灵活\n2. 代码无法复用\n\n### 方式2\n1. 将攻击方式提取出来定义成接口\n2. 各个角色子类实现此接口\n\n####代码\n\n```\n//\n//  characters.h\n//\n\nclass AttackBehavior\n{\npublic:\n\n};\n\n//角色父类\nclass Character\n{\npublic:\n\tvirtual void attack();\n};\n\n//刽子手\nclass Executioner : public Character ,public AttackBehavior\n{\npublic:\n\tvoid attack();\n};\n\n//剑客\nclass SwordsMan : public Character ,public AttackBehavior\n{\npublic:\n\tvoid attack();\n};\n\n```\n\n```\n//\n//  characters.cpp\n//\n\n#include <iostream>\n#include \"characters.h\"\n\nusing namespace std;\n\nvoid AttackBehavior::attack()\n{\n\n}\n\nvoid Executioner::attack()\n{\n\tcout << \"Executioner::attack\" << endl;\n}\n\nvoid SwordsMan::attack()\n{\n\tcout << \"SwordsMan::attack\" << endl;\n}\n\n```\n\n####分析结论\n这种方式比方式1够灵活，可是代码依然不能复用。\n这两种方式都依赖于“实现”，我们被实现绑的死死的，没办法改角色的攻击方式。\n\n####缺点\n2. 代码无法复用\n\n### 最终实现\n首先这里引出二条设计原则：\n+ `找出应用中可能需要变化之处，把它们独立出来，不要和那些不需要变化的代码混在一起。`\n+ `针对接口编程，而不是针对实现编程。`\n\n1. 把角色的攻击行为取出来定义成接口，再由其他具体的攻击行为实现它。\n2. 在父类中把行为组合到角色中来。\n\n####代码\n```\n//\n//  characters.h\n//\n\n//攻击接口\nclass AttackBehavior\n{\npublic:\n\tvirtual void attack();\n};\n\n//刽子手攻击行为\nclass ExecutionerBehavior : public AttackBehavior\n{\npublic:\t\n\tvoid attack();\n};\n\n//剑客攻击行为\nclass SwordsManBehavior : public AttackBehavior\n{\npublic:\t\n\tvoid attack();\n};\n\n//弓箭手攻击行为\nclass ArcherBehavior : public AttackBehavior\n{\npublic:\t\n\tvoid attack();\n};\n\n\n//角色-父类\nclass Character\n{\npublic:\n\tCharacter();\n\n\t//角色攻击方法\n\tvirtual void attack();\n\n\tvoid setAttackBehavior(AttackBehavior*);\n\tAttackBehavior* getAttackBehavior();\n\nprivate:\n\t//攻击行为变量\n\tAttackBehavior *_attackBehavior;\n};\n\n//角色-刽子手\nclass Executioner : public Character \n{\n};\n\n//角色-剑客\nclass SwordsMan : public Character \n{\n};\n\n//角色-弓箭手\nclass Archer : public Character \n{\n};\n```\n\n```\n//\n//  characters.cpp\n//\n\n#include <iostream>\n#include \"characters.h\"\n\nusing namespace std;\n\nvoid AttackBehavior::attack()\n{\n\t\n}\n\nvoid ExecutionerBehavior::attack()\n{\n\tcout << \"exec Executioner::attack\" << endl;\n}\n\nvoid SwordsManBehavior::attack()\n{\n\tcout << \"exec SwordsMan::attack\" << endl;\n}\n\nvoid ArcherBehavior::attack()\n{\n\tcout << \"exec Archer::attack\" << endl;\n}\n\n\nCharacter::Character():_attackBehavior(NULL)\n{\n}\n\nvoid Character::attack()\n{\n\tif (!_attackBehavior)return;\n\n\t_attackBehavior->attack();\n}\n\nvoid Character::setAttackBehavior(AttackBehavior *attackBehavior)\n{\n\t_attackBehavior = attackBehavior;\n}\n\nAttackBehavior* Character::getAttackBehavior()\n{\n\treturn _attackBehavior;\n}\n\nint main(int argc, char const *argv[])\n{\n\tSwordsManBehavior swordsManBehavior;\n\tArcherBehavior \t  archerBehavior;\n\n\tSwordsMan character;\n\tcharacter.setAttackBehavior(&swordsManBehavior);\n\tcharacter.attack();\n\n\tcharacter.setAttackBehavior(&archerBehavior);\n\tcharacter.attack();\n\n\treturn 0;\n}\n```\n####分析结论\n最终方式迥异于前两种方式，前两种的做法是：行为来自`Character`父类的具体实现，或是继承某个接口并由子类自行实现而来。\n这种做法和“继承”不同的地方在于，角色的行为不是继承来的，而是和适当的行为对象“组合”来的。\n这是一个很重要的技巧。其实这就是第三个设计原则：\n\n+ `多用组合，少用继承。`\n\n## 总结\n###策略模式\n定义了算法族，分别封装起来，但它们之间可以互相替换，此模式让算法的变化独立于使用算法的客户。\n\n###设计模式的好处\n1. 让开发人员之间有共享的词汇。\n2. 可以把你的思考架构的层次提高到模式层面，而不是仅停留在琐碎的对象上。\n\n###设计原则\n1. 找出应用中可能需要变化之处，把它们独立出来，不要和那些不需要变化的代码混在一起。\n2. 针对接口编程，而不是针对实现编程。\n3. 多用组合，少用继承。\n\n###建议\n1. 有一些面向对象原则，适用于所有的模式。当你无法找到适当的模式解决问题时，采用这些原则可以帮助你。\n2. 建立可维护的OO系统，要诀就在于随时想到系统以后可能需要的变化以及应付变化的原则。\n","slug":"Strategy","published":1,"updated":"2015-06-01T14:46:22.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciakg4ing000u8fp9avv8zwbv"}],"PostAsset":[],"PostCategory":[{"post_id":"ciakg4ima00008fp92mr2v930","category_id":"ciakg4ime00018fp9e922okxa","_id":"ciakg4imf00048fp9vi0rhav9"},{"post_id":"ciakg4in8000c8fp9boc06a5m","category_id":"ciakg4ime00018fp9e922okxa","_id":"ciakg4in9000d8fp9lrpjeocf"},{"post_id":"ciakg4ina000g8fp9inz1fwd8","category_id":"ciakg4ime00018fp9e922okxa","_id":"ciakg4ina000h8fp9c31xkv9l"},{"post_id":"ciakg4inc000k8fp9zf2y9ish","category_id":"ciakg4ime00018fp9e922okxa","_id":"ciakg4inc000l8fp9o32clsu8"},{"post_id":"ciakg4ine000o8fp9ulzkmrid","category_id":"ciakg4ime00018fp9e922okxa","_id":"ciakg4ine000p8fp9i0mmlziw"},{"post_id":"ciakg4ing000u8fp9avv8zwbv","category_id":"ciakg4inj000v8fp91z2aqrro","_id":"ciakg4ink00108fp9f4qhd62t"},{"post_id":"ciakg4ing000u8fp9avv8zwbv","category_id":"ciakg4inj000y8fp9efofgu9k","_id":"ciakg4ink00128fp9mnnhs42k"}],"PostTag":[{"post_id":"ciakg4ima00008fp92mr2v930","tag_id":"ciakg4ime00028fp92kuf5ifp","_id":"ciakg4img00068fp9a9v9r55n"},{"post_id":"ciakg4ima00008fp92mr2v930","tag_id":"ciakg4imf00038fp91hpq6ss0","_id":"ciakg4img00078fp9y2kfy9th"},{"post_id":"ciakg4ima00008fp92mr2v930","tag_id":"ciakg4img00058fp9ov1tzq9m","_id":"ciakg4img00088fp9jjydn1c9"},{"post_id":"ciakg4in8000c8fp9boc06a5m","tag_id":"ciakg4in9000e8fp97k2c9kt3","_id":"ciakg4in9000f8fp93oqizczk"},{"post_id":"ciakg4ina000g8fp9inz1fwd8","tag_id":"ciakg4inb000i8fp9hfs86alm","_id":"ciakg4inb000j8fp9hat1g6yn"},{"post_id":"ciakg4inc000k8fp9zf2y9ish","tag_id":"ciakg4inc000m8fp9vplyqgec","_id":"ciakg4ind000n8fp9ex1zz2nd"},{"post_id":"ciakg4ine000o8fp9ulzkmrid","tag_id":"ciakg4ine000q8fp97rl2ozfz","_id":"ciakg4inf000s8fp9nmhf9i5l"},{"post_id":"ciakg4ine000o8fp9ulzkmrid","tag_id":"ciakg4inf000r8fp9edhyasp2","_id":"ciakg4inf000t8fp9ikn0oeff"},{"post_id":"ciakg4ing000u8fp9avv8zwbv","tag_id":"ciakg4inj000w8fp9ar4miksd","_id":"ciakg4ink000z8fp9hhnc56kn"},{"post_id":"ciakg4ing000u8fp9avv8zwbv","tag_id":"ciakg4inj000x8fp9ki4jz6qn","_id":"ciakg4ink00118fp91i1puk1j"}],"Tag":[{"name":"Array","_id":"ciakg4ime00028fp92kuf5ifp"},{"name":"Set","_id":"ciakg4imf00038fp91hpq6ss0"},{"name":"Dictionary","_id":"ciakg4img00058fp9ov1tzq9m"},{"name":"控制流","_id":"ciakg4in9000e8fp97k2c9kt3"},{"name":"Swift算术运算符","_id":"ciakg4inb000i8fp9hfs86alm"},{"name":"Swift基础","_id":"ciakg4inc000m8fp9vplyqgec"},{"name":"字符串","_id":"ciakg4ine000q8fp97rl2ozfz"},{"name":"字符","_id":"ciakg4inf000r8fp9edhyasp2"},{"name":"策略模式","_id":"ciakg4inj000w8fp9ar4miksd"},{"name":"Head First","_id":"ciakg4inj000x8fp9ki4jz6qn"}]}}